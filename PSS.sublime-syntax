%YAML 1.2
---

name: PSS
file_extensions:
  - pss
scope: source.pss
version: 2

# Syntax for the PSS domain-specific-language
# Note: Numbered comments refer to chapters in the PSS Specification 2.0+
# See also: https://www.sublimetext.com/docs/3/syntax.html and https://www.sublimetext.com/docs/3/scope_naming.html
# Note to self:  Ctrl+Alt+Shift+P (Windows/Linux) -> scope under caret (MacOS: Ctrl+Shift+P)
# TODO: #B.12 Template types
# see other TODOs below

variables:
  scalar_types: int|bit|string|bool|enum
  collection_types: array|list|map|set
  built_in_types: ({{scalar_types}}|{{collection_types}})
  built_in_constants: null|true|false
  built_in_functions: message|appendf|error|fatal
  access: public|protected|private
  attribs: rand|static\sconst|static|const # cannot use \s+ here
  exec_kinds: pre_solve|post_solve|body|pre_body|header|declaration|run_start|run_end|init_down|init_up|init|post_allocate
  object_kinds: struct|buffer|stream|state|resource
  bin_digit: '[0-1]'
  oct_digit: '[0-7]'
  dec_digit: \d
  hex_digit: '[0-9a-fA-F]'
  dec_number: '{{dec_digit}}[{{dec_digit}}_]*'
  hex_number: '{{hex_digit}}[{{hex_digit}}_]*'
  oct_number: '{{oct_digit}}[{{oct_digit}}_]*'
  bin_number: '{{bin_digit}}[{{bin_digit}}_]*'
  escaped_char: \\n|\\t|\\f|\\"|\\\\|\\r|\\t|\\f|\\"|\\'|\\\\|\\r|\\a|\\b|\\v|\\\[0-7\]\[0-7\]\[0-7\]
  # Tags in comment.line that will be highlighted
  comment_tags: 'TODO:?|DEBUG:?|FIXME:?|BAUSTELLE:?|TBD:?'
  invalid_names: '{{access}}|{{attribs}}'
  # Valid name that can also be a hierarchical reference
  valid_name: ([a-zA-Z](?:[a-zA-Z0-9_.:]+)?(?<!{{invalid_names}}))
  # Simple valid identifier
  valid_id: ([a-zA-Z](?:[a-zA-Z0-9_]+)?(?<!{{invalid_names}}))
  super_spec: \:\s*{{valid_name}}
  scalar_range_modifier: '\bin\s*\[.+?\.\..+?\]'
  scalar_width_modifier: '\[\s*\S+\s*(?:\:\s*0\s*)?\]'
  valid_scalar_type: ({{scalar_types}})(\s*(?:{{scalar_range_modifier}}|{{scalar_width_modifier}}))?
  valid_access: (?:{{access}})
  valid_attribs: (?:(?:{{attribs}})\s+)
  valid_attribs_no_rand: (?:(?:static\s+const|static|const)\s+)
  platform_qualifier: (?:target|solve)
  language_identifier: '[A-Z]+'
  function_qualifier: pure|static
  target_language: '[A-Z](?:[_\w]*)\s*'

contexts:
  main:
   - include: imports
   - include: package
   - include: actions
   - include: enum-declaration
   - include: function-declaration
   - include: components
   - include: structs
   - include: covergroups
   - include: code

  # Include comments in all scopes (except strings, see below)
  prototype:
    - include: comments

  imports:
    # import_function
    - match: \b(import)\s+(\b{{platform_qualifier}}\s+)?({{language_identifier}}\s+)?\b(function)\s+(.*)(;)
      captures:
        1: keyword.control.import.pss
        2: keyword.declaration.platform_qualifier.pss
        3: keyword.declaration.language_identifier.pss
        4: keyword.declaration.function.pss
        5: meta.method.identifier.pss entity.name.function.pss
        6: punctuation.terminator.pss
    # import_class_decl
    - match: \b(import)\s+\b(class)\s+{{valid_name}}\b(?:\s*{{super_spec}})*
      captures:
        1: keyword.control.import.pss
        2: keyword.declaration.class.pss
        3: entity.name.class.pss
        4: entity.name.superclasses.pss
    # import_stmt
    - match: \b(import)\s+(.*)(;)
      captures:
        1: keyword.control.import.pss
        2: entity.name.pss
        4: punctuation.terminator.pss

  # B.1 Package
  package:
  # Note: extensions may appear in (global unnamed) package and component decls
    - match: \b(package)\s+\b{{valid_name}}\b
      captures:
        1: keyword.declaration.namespace.pss
        2: entity.name.pss
      push: package-declaration

  package-declaration:
    - meta_scope: meta.package.declaration.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.package.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: main

  # B.8 Component
  # TODO: template_param_decl_list
  components:
    - match: (?=^\s*(pure\b)?\s*\bcomponent\s+\b{{valid_name}}(\s*{{super_spec}})*) # \s*\{)
      push: component-declaration
    - match: (?=^\s*extend\s*\bcomponent\s+\b{{valid_name}}\b) #\s*\{)
      push: component-declaration

  component-declaration:
    - meta_scope: meta.class.declaration.pss
    - match: (pure\b)?\s*\b(component)\s+{{valid_name}}\b(?:\s*{{super_spec}})*
      captures:
        1: keyword.declaration.pure.pss
        2: keyword.declaration.class.pss
        3: entity.name.class.pss
        4: entity.name.superclasses.pss
    - match: (extend)\s*\b(component)\s+\b{{valid_name}}\b
      captures:
        1: keyword.declaration.extend.pss
        2: keyword.declaration.class.pss
        3: entity.name.class.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.class.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: imports
        - include: actions
        - include: enum-declaration
        - include: function-declaration
        - include: covergroups
        - include: structs
        - include: exec-blocks
        - include: code

  # B.2 Action
  # note: abstract action declarations and extensions appear also in package scope
  actions:
    - match: (?=^\s*\babstract\s+\baction\s+\b{{valid_name}}\b(\s*{{super_spec}})*)
      push: action-abstract-declaration
    - match: (?=^\s*\baction\s+\b{{valid_name}}\b(\s*{{super_spec}})*)
      push: action-declaration
    - match: (?=^\s*extend\s*\baction\s+\b{{valid_name}}\b)
      push: action-extend-declaration

  action-abstract-declaration:
    - meta_scope: meta.action.declaration.pss
    - match: \b(abstract)\s*\b(action)\s+\b{{valid_name}}\b(?:\s*{{super_spec}})*
      captures:
        1: keyword.declaration.abstract.pss
        2: keyword.declaration.action.pss
        3: entity.name.action.pss
        4: entity.name.superactions.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.action.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: activity
        - include: exec-blocks
        - include: covergroups
        - include: constraint-declaration
        - include: code

  action-declaration:
    - meta_scope: meta.action.declaration.pss
    - match: \b(action)\s+\b{{valid_name}}\b(?:\s*{{super_spec}})*
      captures:
        1: keyword.declaration.action.pss
        2: entity.name.action.pss
        3: entity.name.superactions.pss

    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.action.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: activity
        - include: exec-blocks
        - include: covergroups
        - include: constraint-declaration
        - include: code

  action-extend-declaration:
    - match: (extend)\s*\b(action)\s+\b{{valid_name}}\b
      captures:
        1: keyword.declaration.extend.pss
        2: keyword.declaration.action.pss
        3: entity.name.action.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.action.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: activity
        - include: exec-blocks
        - include: covergroups
        - include: constraint-declaration
        - include: code

  activity:
    - meta_scope: meta.activity.declaration.pss
    - match: ^\s*(activity) #\s*(\{)
      captures:
        1: keyword.declaration.activity.pss
        # 2: punctuation.section.begin.pss
      push: activity-statement

  activity-statement:
    - meta_scope: meta.activity.body.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.activity.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: code

  # B.4 Exec blocks
  exec-blocks:
    # target-language, support only triple-quoted strings
    - match: '^\s*(exec)\s+\b({{exec_kinds}})\s*\b({{target_language}})=\s*(""")'
      captures:
        1: keyword.declaration.exec.pss
        2: keyword.declaration.exec_kind.pss
        3: keyword.declaration.exec.target_language_scheme.pss
        4: punctuation.section.begin.pss
      embed: scope:source.c++
      embed_scope: meta.embedded.c++.pss
      escape: '"""'
      escape_captures:
        0: punctuation.section.code.end.pss

    # plain-file
    - match: '^\s*(exec)\s+(file\s+)("[^"]*")\s*='
      captures:
        1: keyword.declaration.exec.pss
        2: keyword.declaration.exec_target_file.pss
        3: entity.name.filename.pss
      push:
        - match: (""")
          captures:
            1: punctuation.section.begin.pss
          set: exec-file

    # native exec
    - match: '^\s*(exec)\s+\b({{exec_kinds}})'
      captures:
        1: keyword.declaration.exec.pss
        2: keyword.declaration.exec_kind.pss
      push:
        - match: '(\{)'
          captures:
            1: punctuation.section.begin.pss
          set: exec-body

  exec-body:
    - meta_scope: meta.exec.body.pss
    - match: (\})
      captures:
        1: punctuation.section.end.pss
      pop: true
    - include: code

  exec-file:
    - meta_scope: markup.raw.block meta.exec.file.pss
    - match: '"""'
      captures:
        1: punctuation.section.end.pss
      pop: true

  # B.3 Struct (can be struct, buffer, stream, state, resource)
  structs:
    - match: (?=^\s*\b({{object_kinds}})\s+\b{{valid_name}}\b(\s*{{super_spec}})*)
      push: struct-declaration
    - match: (?=^\s*extend\s*\b({{object_kinds}})\s+\b{{valid_name}}\b(\s*{{super_spec}})*)
      push: struct-declaration

  struct-declaration:
    - match: \b(extend\s*)?({{object_kinds}})\s+\b{{valid_name}}\b(?:\s*{{super_spec}})*
      captures:
        1: keyword.declaration.extend.pss
        2: keyword.declaration.struct.pss
        3: entity.name.struct.pss
        4: entity.name.superactions.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.struct.body.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: exec-blocks
        - include: covergroups
        - include: constraint-declaration
        - include: code

  # B.13 Data Types
  enum-declaration:
    - match: \b(enum)\s+\b{{valid_name}}\b
      captures:
        1: keyword.declaration.enum.pss
        2: storage.type.pss
      push: enum-values-declaration

  enum-values-declaration:
    - meta_content_scope: meta.type.enum.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.type.enum.pss
        - match: (\s*,)
          captures:
            1: punctuation.separator.pss
        - match: (\s*,)?(?:\s*{{valid_id}}\s*)(=)?
          captures:
            1: punctuation.separator.pss
            2: constant.other.enum.pss
            3: keyword.operator.assignment.pss
        - match: (\})
          captures:
            1: punctuation.section.end.pss
          pop: true
        - include: priority-scopes

  # B.15 Coverage declaration (appears in package, component, struct, action)
  covergroups:
    - meta_scope: meta.type.covergroup.pss

    # inline covergroup instantiation
    - match: \b(covergroup) # \s+(\{)
      captures:
        1: keyword.declaration.covergroup.pss
        # 2: punctuation.section.begin.pss
      push: covergroup-instantiation

    # covergroup declaration
    - match: \b(covergroup\s+)(?:{{valid_id}})
      captures:
        1: keyword.declaration.covergroup.pss
        2: entity.name.covergroup.pss

    # covergroup instantiation with ports (if no ports, will be matched elsewhere)
    - match: (?:{{valid_id}}\s+)\b(?:{{valid_name}})\s*(?=\()
      captures:
        1: storage.type.pss
        2: variable.other.covergroup.pss

  covergroup-instantiation:
    - meta_content_scope: meta.type.covergroup.pss
    - match: (\{)
      captures:
        1: punctuation.section.begin.pss
      set:
        - meta_content_scope: meta.type.covergroup.pss
        - match: (\})\s*(?:{{valid_id}})?
          captures:
            1: punctuation.section.end.pss
            2: variable.other.covergroup.pss
          pop: true
        - include: priority-scopes
        - include: default-scopes

  # B.14 Constraints declaration (appears in struct, action)
  # Keep it simple, only match part before block
  constraint-declaration:
    - meta_scope: meta.type.constraint.pss
    - match: \b(dynamic\s+)?(constraint\s+)(?:{{valid_name}}\s+)
      captures:
        1: keyword.declaration.dynamic.pss
        2: keyword.declaration.constraint.pss
        3: entity.name.constraint.pss
    # unnamed constraint
    - match: \b(dynamic\s+)?(constraint\s+)
      captures:
        1: keyword.declaration.dynamic.pss
        2: keyword.declaration.constraint.pss

  # B.5 Functions (in package, component)
  function-declaration:
    - match: \b(target\s+)([A-Z]+\s+)(function\s+)\b(void\s+)(?:{{valid_name}})
      captures:
        1: keyword.declaration.target_template.pss
        2: keyword.declaration.target_language.pss
        3: keyword.declaration.function.pss
        4: meta.method.return-type.pss storage.type.pss
        5: meta.method.identifier.pss entity.name.function.pss
      push:
        - match:  '(\()'
          captures:
            1: punctuation.section.begin.pss
          set: function-parameters

    - match: \b((?:{{function_qualifier}})\s+)?(function\s+)\b(void\s+)(?:{{valid_name}})
      captures:
        1: keyword.declaration.function-qualifer.pss
        2: keyword.declaration.function.pss
        3: meta.method.return-type.pss storage.type.pss
        4: meta.method.identifier.pss entity.name.function.pss
      push:
        - match:  '(\()'
          captures:
            1: punctuation.section.begin.pss
          set: function-parameters

    - match: \b((?:{{function_qualifier}})\s+)?(function\s+)(?:{{valid_scalar_type}}\s+)(?:{{valid_name}})
      captures:
        1: keyword.declaration.function-qualifer.pss
        2: keyword.declaration.function.pss
        3: meta.method.return-type.pss storage.type.pss
        4: meta.method.return-type.pss storage.modifier.range.pss
        5: meta.method.identifier.pss entity.name.function.pss
      push:
        - match: '(\()'
          captures:
            1: punctuation.section.begin.pss
          set: function-parameters

  # this syntax for prototypes only in import_class_decl for which we don't have a scope -> include in code
  function-prototype:
    - match: \b(void\s+)(?:{{valid_name}})
      captures:
        1: meta.method.return-type.pss storage.type.pss
        2: meta.method.identifier.pss entity.name.function.pss
      push:
        - match:  '(\()'
          captures:
            1: punctuation.section.begin.pss
          set: function-parameters

    - match: \b(?:{{valid_scalar_type}}\s+)(?:{{valid_name}})
      captures:
        1: meta.method.return-type.pss storage.type.pss
        2: meta.method.return-type.pss storage.modifier.range.pss
        3: meta.method.identifier.pss entity.name.function.pss
      push:
        - match: '(\()'
          captures:
            1: punctuation.section.begin.pss
          set: function-parameters

  function-parameters:
    - match: (\))
      captures:
        1: punctuation.section.end.pss
      pop: true
    - include: priority-scopes
    - include: data-types
    - match: \b(type|struct)\b
      captures:
        1: storage.type.pss
    - match: \s(\.\.\.)\s
      captures:
         1: keyword.other.pss
    - include: default-scopes

  function-call:
    - match: \b(?:{{valid_name}})\s*(\()
      captures:
        1: meta.method.identifier.pss variable.function.pss
        2: punctuation.section.begin.pss
      push: function-call-parameters

  function-call-parameters:
    - match: (\))
      captures:
        1: punctuation.section.end.pss
      pop: true
    - include: priority-scopes
    - include: default-scopes

  # Body of components, actions etc.
  code:
    - meta_content_scope: meta.struct.body.pss
    - include: member-declaration
    - include: priority-scopes
    - match: \(\s*(void)\s*\)
      captures:
        1: keyword.other.pss
    - include: stray-brackets-code
    - include: default-scopes
    - include: function-call
    - include: function-prototype

  # B.11 Data Declarations
  member-declaration:
    # Match scalar field members
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs}})*(?:{{valid_scalar_type}})\s+(?:{{valid_id}}\s*)(;|\=)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.type.pss
        4: storage.modifier.range.pss
        5: variable.other.member.pss
        6: punctuation.terminator.pss

    # chandle
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs_no_rand}})*(chandle)\s+(?:{{valid_id}}\s*)(;|\=)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.type.chandle.pss
        4: variable.other.member.pss
        5: punctuation.terminator.pss

    # ref
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs_no_rand}})*(ref)\s+(?:{{valid_id}}\s+)(?:{{valid_id}}\s*)(;|\=)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.modifier.pointer.pss
        4: storage.type.ref.pss
        5: variable.other.member.pss
        6: punctuation.terminator.pss

    # Collection types (array, list, map, set) -> open new scope
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs}})*({{collection_types}})\s*(\<)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.type.collection.pss
        4: punctuation.section.start.pss
      push: collection-declaration

    # Array has alternative syntax name[num-elements], see 8.8.2
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs}})*(?:{{valid_scalar_type}})\s+(?:{{valid_id}}\s*)(\[\s*\S+\s*\]\s*)(;|\=)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.type.pss
        4: storage.modifier.range.pss
        5: variable.other.member.pss
        6: storage.modifier.range.pss
        7: punctuation.terminator.pss

    # other (user) types (enum, class)
    - match: '^\s*({{valid_access}}\s+)?({{valid_attribs}})*(?:{{valid_id}})\s+(?:{{valid_id}}\s*)(;|\=)'
      captures:
        1: storage.modifier.access.pss
        2: storage.modifier.attribute.pss
        3: storage.type.pss
        4: variable.other.member.pss
        5: punctuation.terminator.pss

  # Collection type scope
  collection-declaration:
    - match: ({{collection_types}})\s*(\<)
      captures:
        1: storage.type.collection.pss
        2: punctuation.section.start.pss
      push: collection-declaration
    - match: '(\>)\s+(?:{{valid_id}}\s*)(;|\=)'
      captures:
        1: punctuation.section.end.pss
        2: variable.other.member.pss
      pop: true
    - match: (\>)
      captures:
        1: punctuation.section.end.pss
      pop: true
    - include: data-types


  # Group commonly used scopes
  priority-scopes:
    - include: literals
    - include: operators

  # stray brackets/braces (taken from systemverilog syntax)
  stray-brackets:
    - match: '\)|\]|\}'
      scope: invalid.illegal.stray-bracket-end.pss

  stray-brackets-code:
    - match: '\('
      push:
        - meta_content_scope: meta.class.body.pss
        - match: '\)'
          pop: true
        - match: '[^\)\n]*$(?!\n)'
          scope: invalid.illegal.unbalanced-bracket.pss
        - include: code
    - match: '\['
      push:
        - meta_content_scope: meta.class.body.pss
        - match: '\]'
          pop: true
        - match: '[^\]\n]*$(?!\n)'
          scope: invalid.illegal.unbalanced-bracket.pss
        - include: code
    - match: '\{'
      push:
        - meta_content_scope: meta.class.body.pss
        - match: '\}'
          pop: true
        - match: '[^\}\n]*$(?!\n)'
          scope: invalid.illegal.unbalanced-bracket.pss
        - include: code
    - include: stray-brackets

  # Basic scopes
  comments:
    - match: (//|--)
      scope: punctuation.section.comment.pss
      push: comment-contents
    - match: (/\*)
      scope: punctuation.section.comment.begin.pss
      push: comment-multiline

  comment-contents:
    - meta_scope: comment.line.pss
    - meta_include_prototype: false
    - match: \b{{comment_tags}}
      scope: invalid
    - match: $
      pop: true

  comment-multiline:
    - meta_content_scope: text.pss
    - meta_include_prototype: false
    - match: (\*/)
      scope: punctuation.section.comment.end.pss
      pop: true

  string:
    - meta_scope: string.quoted.double.pss
    - meta_include_prototype: false
    - match: (?:{{escaped_char}})
      scope: constant.character.escape.pss
    - match: '"'
      scope: punctuation.definition.string.end.pss
      pop: true

  triple-string:
    - meta_scope: markup.raw.block string.quoted.triple.pss
    - meta_include_prototype: false
    - match: '"""'
      scope: punctuation.definition.triple-string.end.pss
      pop: true

  # B.19
  literals:
    - match: \b({{built_in_constants}})\b
      captures:
        1: constant.language.pss
    # sized numbers
    - match: ({{dec_digit}})?(')([sS]*[bB]{{bin_number}})\b
      captures:
        1: constant.numeric.base.pss
        2: punctuation.separator.literal.pss
        3: constant.numeric.sized.binary.pss
    - match: ({{dec_digit}})?(')([sS]*[oO]{{oct_number}})\b
      captures:
        1: constant.numeric.base.pss
        2: punctuation.separator.literal.pss
        3: constant.numeric.sized.octal.pss
    - match: ({{dec_digit}})?(')([sS]*[dD]{{dec_number}})\b
      captures:
        1: constant.numeric.base.pss
        2: punctuation.separator.literal.pss
        3: constant.numeric.sized.decimal.pss
    - match: ({{dec_digit}})?(')([sS]*[hH]{{hex_number}})\b
      captures:
        1: constant.numeric.base.pss
        2: punctuation.separator.literal.pss
        3: constant.numeric.sized.hex.pss
    # unsized numbers
    - match: \b(0{{oct_number}})\b
      captures:
        1: constant.numeric.unsized.octal.pss
    - match: \b(0[xX]{{hex_number}})\b
      captures:
        1: constant.numeric.unsized.hex.pss
    - match: \b({{dec_number}})*\b
      captures:
        1: constant.numeric.unsized.decimal.pss

    - match: '"""'
      scope: punctuation.definition.triple-string.begin.pss
      push: triple-string

    - match: '"'
      scope: punctuation.definition.string.begin.pss
      push: string

  # Operators
  operators:
    - scope: keyword.operator.boolean.pss
      match: '(&&|\|\||!)'

    - scope: keyword.operator.assignment.pss
      match: '(=|\+=|-=|&=|\|=|>>=|<<=)'

    - scope: keyword.operator.comparison.pss
      match: (==|!=|>|<|===|!===|>=|<=)

    - scope: keyword.operator.arithmetic.pss
      match: (-|\+|\*|/|%|<<|>>|\*\*|\^)

    - scope: keyword.operator.unary.pss
      match: '(-|&|\||~|\^)'

    - scope: keyword.operator.range.pss
      match: '{{scalar_range_modifier}}'

    - scope: keyword.operator.set.pss
      match: \bin\b

    - scope: keyword.operator.iteration.pss
      match: ':'

    - scope: keyword.operator.collection-separator.pss
      match: ','

  data-types:
    - match: \b(?:\b{{valid_scalar_type}})\b
      captures:
        1: storage.type.pss
    - match:  \b(chandle)\b
      captures:
        1: storage.type.pss
    - match:  \b(ref)\b
      captures:
        1: storage.type.pss


####### These pick-up any remaining scopes not matched above

  default-scopes:
    - scope: keyword.other.pss
      match: \bsuper\b

    - scope: support.function.builtin.pss
      match: \b({{built_in_functions}})\b

    - scope: keyword.control.activity.pss
      match: \b(do|with|parallel|join_branch|join_select|join_none|join_first|select|replicate|symbol|bind)\b

    - scope: keyword.other.pss
      match: \b(type_option|option|coverpoint|cross|iff|default|bins|illegal_bins|ignore_bins)\b

    - scope: keyword.other.pss
      match: \b(weight|goal|name|comment|at_least|detect_overlap|auto_bin_max|per_instance)\b

    - scope: keyword.control.pss
      match: \b(sequence|repeat|while|schedule|foreach|forall|if|else|match|default|break|continue)

    - scope: keyword.other.pss
      match: \b(compile|assert|has)\b

    - scope: keyword.other.pss
      match: \b(input|output)\b

    - scope: keyword.other.pss
      match: \b(lock|share)\b

    - scope: keyword.other.pss
      match: \btype\b

    - scope: keyword.other.pss
      match: \b(override|instance)\b

# end
